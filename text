// CurrencyConverter.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CurrencyConverter = () => {
    const [exchangeRates, setExchangeRates] = useState({});
    const [fromCurrency, setFromCurrency] = useState('USD');
    const [toCurrency, setToCurrency] = useState('EUR');
    const [amount, setAmount] = useState(1);
    const [convertedAmount, setConvertedAmount] = useState(null);

    useEffect(() => {
        const fetchExchangeRates = async () => {
            try {
                const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD');
                setExchangeRates(response.data.rates);
            } catch (error) {
                console.error('Error fetching exchange rates:', error);
            }
        };

        fetchExchangeRates();
    }, []);

    useEffect(() => {
        if (exchangeRates[fromCurrency] && exchangeRates[toCurrency]) {
            const rate = exchangeRates[toCurrency] / exchangeRates[fromCurrency];
            setConvertedAmount(amount * rate);
        }
    }, [amount, fromCurrency, toCurrency, exchangeRates]);

    return (
        <div>
            <h1>Currency Converter</h1>
            <div>
                <label>
                    From:
                    <select value={fromCurrency} onChange={(e) => setFromCurrency(e.target.value)}>
                        {Object.keys(exchangeRates).map((currency) => (
                            <option key={currency} value={currency}>
                                {currency}
                            </option>
                        ))}
                    </select>
                </label>
                <label>
                    To:
                    <select value={toCurrency} onChange={(e) => setToCurrency(e.target.value)}>
                        {Object.keys(exchangeRates).map((currency) => (
                            <option key={currency} value={currency}>
                                {currency}
                            </option>
                        ))}
                    </select>
                </label>
                <label>
                    Amount:
                    <input
                        type="number"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                    />
                </label>
            </div>
            <div>
                {convertedAmount !== null && (
                    <p>
                        {amount} {fromCurrency} = {convertedAmount.toFixed(2)} {toCurrency}
                    </p>
                )}
            </div>
        </div>
    );
};

export default CurrencyConverter;
